import asyncio
import pandas as pd
import urllib.parse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler,
    CallbackQueryHandler, filters
)
import os
import requests
from datetime import datetime
import logging
from typing import Optional, Dict, Any
import time
import threading
import traceback
import aiohttp
import shlex

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "TOKEN_BOT"

class UserSettings:
    def __init__(self):
        self.sheet_url: Optional[str] = None
        self.sheet_name: Optional[str] = None
        self.check_interval: int = 60
        self.is_monitoring: bool = False
        self.previous_data: Optional[pd.DataFrame] = None
        self.monitoring_task: Optional[asyncio.Task] = None
        self.notification_threshold: int = 1
        self.last_check_time: Optional[datetime] = None
        self.error_count: int = 0
        self.max_error_count: int = 3
        self.monitored_columns: set = set()  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        self.notification_format: str = 'detailed'  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.last_error_message: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏
    
def excel_column(index):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Excel (A, B, C, ...)"""
    letters = ''
    index += 1
    while index > 0:
        index, remainder = divmod(index - 1, 26)
        letters = chr(65 + remainder) + letters
    return letters

def get_user_settings(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> UserSettings:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ."""
    if 'user_settings' not in context.bot_data:
        context.bot_data['user_settings'] = {}
    if user_id not in context.bot_data['user_settings']:
        context.bot_data['user_settings'][user_id] = UserSettings()
    return context.bot_data['user_settings'][user_id]

def create_settings_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    keyboard = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data='start_monitoring'),
            InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data='stop_monitoring')
        ],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data='status')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Google Sheets.\n\n"
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "1Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö.\n"
        "2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n"
        "3Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥. –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ –µ–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."
    )
    await update.message.reply_text(welcome_message)

async def set_notification_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_settings = get_user_settings(context, update.effective_user.id)
    if context.args and context.args[0].isdigit():
        threshold = int(context.args[0])
        if threshold > 0:
            user_settings.notification_threshold = threshold
            await update.message.reply_text(
                f'–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {threshold} –∏–∑–º–µ–Ω–µ–Ω–∏–π.'
            )
        else:
            await update.message.reply_text('–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
    else:
        await update.message.reply_text(
            '–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: /set_threshold 3'
        )

async def check_sheet(user_id: int, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º–∏ —è—á–µ–π–∫–∞–º–∏."""
    user_settings = get_user_settings(context, user_id)
    
    if not all([user_settings.sheet_url, user_settings.sheet_name]):
        await context.bot.send_message(
            chat_id,
            text='‚ùå URL —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –∏–º—è –ª–∏—Å—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_sheet –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.'
        )
        return

    try:
        sheet_id = user_settings.sheet_url.split('/')[5]
        encoded_sheet_name = urllib.parse.quote(user_settings.sheet_name)
        csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={encoded_sheet_name}"

        current_data = pd.read_csv(csv_url, encoding='utf-8', index_col=None)
        user_settings.last_check_time = datetime.now()
        
        # Strip whitespace from column names
        current_data.columns = [col.strip() for col in current_data.columns]
        
        # Rename Unnamed columns to unique names
        for col in current_data.columns:
            if str(col).startswith('Unnamed:'):
                idx = current_data.columns.get_loc(col)
                new_col_name = f'Col_{excel_column(idx)}'
                current_data.rename(columns={col: new_col_name}, inplace=True)
        
        if current_data.empty:
            await context.bot.send_message(
                chat_id,
                text=f'‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ "{user_settings.sheet_name}" –ø—É—Å—Ç–∞.'
            )
            return

        if user_settings.previous_data is None:
            user_settings.previous_data = current_data.copy()
            await context.bot.send_message(
                chat_id,
                text=f'‚úÖ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏—Å—Ç–∞ "{user_settings.sheet_name}"'
            )
            return
        
        common_cols = set(current_data.columns).intersection(set(user_settings.previous_data.columns))
        added_cols = set(current_data.columns) - set(user_settings.previous_data.columns)
        removed_cols = set(user_settings.previous_data.columns) - set(current_data.columns)

        if user_settings.monitored_columns:
            common_cols = common_cols.intersection(user_settings.monitored_columns)
            added_cols = added_cols.intersection(user_settings.monitored_columns)
            removed_cols = removed_cols.intersection(user_settings.monitored_columns)
        
        changes = []

        # Handle common columns
        for i in range(len(current_data)):
            for col in common_cols:
                old_val = user_settings.previous_data.loc[i, col] if i < len(user_settings.previous_data) else None
                new_val = current_data.loc[i, col]
                if pd.notna(old_val) or pd.notna(new_val):
                    if old_val != new_val:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–µ–∫—É—â–µ–º DataFrame
                        col_index = current_data.columns.get_loc(col)
                        cell_addr = f"{excel_column(col_index)}{i+2}"
                        changes.append({
                            'cell': cell_addr,
                            'column': col,
                            'old': old_val,
                            'new': new_val
                        })

        # Handle added columns
        for col in added_cols:
            col_index = current_data.columns.get_loc(col)
            for i in range(len(current_data)):
                new_val = current_data.loc[i, col]
                cell_addr = f"{excel_column(col_index)}{i+2}"
                changes.append({
                    'cell': cell_addr,
                    'column': col,
                    'old': '[–ù–û–í–ê–Ø –ö–û–õ–û–ù–ö–ê]',
                    'new': new_val
                })

        # Handle removed columns
        for col in removed_cols:
            if col in user_settings.previous_data.columns:
                col_index = user_settings.previous_data.columns.get_loc(col)
                for i in range(len(user_settings.previous_data)):
                    old_val = user_settings.previous_data.iloc[i][col]
                    cell_addr = f"{excel_column(col_index)}{i+2}"
                    changes.append({
                        'cell': cell_addr,
                        'column': col,
                        'old': old_val,
                        'new': '[–ö–û–õ–û–ù–ö–ê –£–î–ê–õ–ï–ù–ê]'
                    })

        if len(changes) >= user_settings.notification_threshold:
            if user_settings.notification_format == 'detailed':
                message = "üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
                for change in changes:
                    message += (f"üìç –Ø—á–µ–π–∫–∞ {change['cell']} (–∫–æ–ª–æ–Ω–∫–∞ '{change['column']}')\n"
                        f"–ë—ã–ª–æ: {change['old']}\n"
                        f"–°—Ç–∞–ª–æ: {change['new']}\n\n")
            else:  # compact
                message = "üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n"
                for change in changes:
                    message += f"üìç {change['cell']}: {change['old']} ‚Üí {change['new']}\n"
            
            await send_long_message(chat_id, context, message)
            user_settings.error_count = 0
        
        user_settings.previous_data = current_data.copy()

    except Exception as e:
        user_settings.error_count += 1
        error_message = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}'
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
        
        if user_settings.error_count >= user_settings.max_error_count:
            await context.bot.send_message(
                chat_id,
                text=f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {user_settings.max_error_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫."
            )
            user_settings.is_monitoring = False
            user_settings.monitoring_task = None
        else:
            await context.bot.send_message(chat_id, text=error_message)

async def set_column_filter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    user_settings = get_user_settings(context, update.effective_user.id)
    if not hasattr(user_settings, 'monitored_columns'):
        user_settings.monitored_columns = set()
    
    if not context.args:
        if user_settings.monitored_columns:
            columns_list = ', '.join(user_settings.monitored_columns)
            await update.message.reply_text(
                f'üìä –¢–µ–∫—É—â–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {columns_list}\n'
                '–î–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_column_filter reset'
            )
        else:
            await update.message.reply_text(
                f'üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏.\n'
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_column_filter "–∫–æ–ª–æ–Ω–∫–∞ 1" "–∫–æ–ª–æ–Ω–∫–∞ 2" ...\n'
                '–ü—Ä–∏–º–µ—Ä: /set_column_filter "Col A" ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫—É —Å –∏–º–µ–Ω–µ–º "Col A".\n'
                '–ü—Ä–∏–º–µ—Ä: /set_column_filter "Column B, Data" "Col;C" ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ "Column B, Data" –∏ "Col;C".\n\n'
                '–î–ª—è —Å–±—Ä–æ—Å–∞: /set_column_filter reset\n\n'
				'–í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–º–µ—é—Ç—Å—è —Å—Ç–æ–ª–±—Ü—ã —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ –∏–ª–∏ –æ–Ω–∏ –±–µ–∑—ã–º—è–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç: Col_A, –≥–¥–µ A - —Å—Ç–æ–ª–±–µ—Ü'
            )
        return

    if context.args[0].lower() == 'reset':
        user_settings.monitored_columns.clear()
        await update.message.reply_text('‚úÖ –§–∏–ª—å—Ç—Ä –∫–æ–ª–æ–Ω–æ–∫ —Å–±—Ä–æ—à–µ–Ω. –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏.')
        return

    args = shlex.split(' '.join(context.args))
    user_settings.monitored_columns = set(args)
    await update.message.reply_text(
        f'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏: {", ".join(f"'{col}'" for col in user_settings.monitored_columns)}'
    )

async def set_sheet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ URL –∏ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞ Google Sheets."""
    user_settings = get_user_settings(context, update.effective_user.id)
    if len(context.args) >= 2:
        user_settings.sheet_url = context.args[0]
        user_settings.sheet_name = ' '.join(context.args[1:])
        user_settings.previous_data = None  # Reset previous data
        if user_settings.monitoring_task:
            user_settings.is_monitoring = False
            user_settings.monitoring_task.cancel()
            user_settings.monitoring_task = None
            await context.bot.send_message(
                update.message.chat_id,
                text='‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞—á–Ω–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start_monitoring.'
            )
        await update.message.reply_text(
            f'‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n'
            f'üìä URL —Ç–∞–±–ª–∏—Ü—ã: {user_settings.sheet_url}\n'
            f'üìë –ò–º—è –ª–∏—Å—Ç–∞: {user_settings.sheet_name}\n\n'
            f'–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_monitoring.',
            reply_markup=create_settings_keyboard()
        )
    else:
        await update.message.reply_text(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL Google Sheets –∏ –∏–º—è –ª–∏—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n'
            '–ü—Ä–∏–º–µ—Ä: /set_sheet https://docs.google.com/spreadsheets/d/YOUR_SHEET_ID –õ–∏—Å—Ç1'
        )

async def set_interval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    user_settings = get_user_settings(context, update.effective_user.id)
    if context.args and context.args[0].isdigit():
        interval = int(context.args[0])
        user_settings.check_interval = interval
        
        message = f'‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥.'
        if interval < 10:
            message += '\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –º–∞–ª–µ–Ω—å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ.'
            
        await update.message.reply_text(message, reply_markup=create_settings_keyboard())
    else:
        await update.message.reply_text(
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_interval <—Å–µ–∫—É–Ω–¥—ã>\n'
            '–ü—Ä–∏–º–µ—Ä: /set_interval 60'
        )

async def send_long_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE, message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π."""
    max_message_length = 4096
    for i in range(0, len(message), max_message_length):
        chunk = message[i:i + max_message_length]
        await context.bot.send_message(chat_id, text=chunk)

async def start_monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> None:
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    user_settings = get_user_settings(context, user_id)
    
    if user_settings.monitoring_task is not None:
        user_settings.is_monitoring = False
        await asyncio.sleep(user_settings.check_interval + 1)
        user_settings.monitoring_task.cancel()
        user_settings.monitoring_task = None

    if user_settings.sheet_url and user_settings.sheet_name:
        user_settings.is_monitoring = True
        user_settings.error_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        user_settings.monitoring_task = asyncio.create_task(
            periodic_check(user_id, chat_id, context)
        )
        await context.bot.send_message(chat_id,
            f'‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω\n'
            f'‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {user_settings.check_interval} —Å–µ–∫—É–Ω–¥\n'
            f'üìä –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_settings.notification_threshold} –∏–∑–º–µ–Ω–µ–Ω–∏–π',
            reply_markup=create_settings_keyboard()
        )
    else:
        await context.bot.send_message(chat_id,
            '‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ URL —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–º—è –ª–∏—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_sheet'
        )

async def stop_monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    user_settings = get_user_settings(context, user_id)
    user_settings.is_monitoring = False
    
    if user_settings.monitoring_task is not None:
        user_settings.monitoring_task.cancel()
        user_settings.monitoring_task = None
        user_settings.error_count = 0
    
    await context.bot.send_message(chat_id,
        '‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        reply_markup=create_settings_keyboard()
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat_id
    else:
        query = None
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id

    user_settings = get_user_settings(context, user_id)
    last_check = user_settings.last_check_time.strftime("%Y-%m-%d %H:%M:%S") if user_settings.last_check_time else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

	# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    monitored_cols = "–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏" if not user_settings.monitored_columns else ", ".join(f"'{col}'" for col in user_settings.monitored_columns)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–µ
    last_error = user_settings.last_error_message if hasattr(user_settings, 'last_error_message') and user_settings.last_error_message else "–ù–µ—Ç –æ—à–∏–±–æ–∫"
	
    status_message = (
        f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
        f"üìë URL —Ç–∞–±–ª–∏—Ü—ã: {user_settings.sheet_url or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"üìã –ò–º—è –ª–∏—Å—Ç–∞: {user_settings.sheet_name or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
        f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {user_settings.check_interval} —Å–µ–∫—É–Ω–¥\n"
        f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {'–¥–∞' if user_settings.is_monitoring else '–Ω–µ—Ç'}\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check} (GMT+0)\n"
        f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {user_settings.error_count}/{user_settings.max_error_count}\n"
        f"üéØ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_settings.notification_threshold} –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        f"üëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {monitored_cols}\n"
        f"üìù –§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_settings.notification_format}\n"
        f"‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}\n"
    )

    if update.callback_query:
        await query.message.edit_text(status_message, reply_markup=create_settings_keyboard())
    else:
        await context.bot.send_message(chat_id, status_message, reply_markup=create_settings_keyboard())

async def periodic_check(user_id: int, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã."""
    user_settings = get_user_settings(context, user_id)
    try:
        while user_settings.is_monitoring:
            try:
                await check_sheet(user_id, chat_id, context)
                await asyncio.sleep(user_settings.check_interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_check –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await asyncio.sleep(user_settings.check_interval)
    except asyncio.CancelledError:
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        user_settings.is_monitoring = False
        if user_settings.monitoring_task:
            user_settings.monitoring_task = None

async def root_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        "‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=create_settings_keyboard()
    )

async def set_notification_format(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_settings = get_user_settings(context, update.effective_user.id)
    if not hasattr(user_settings, 'notification_format'):
        user_settings.notification_format = 'detailed'  # –∏–ª–∏ 'compact'
    
    if not context.args:
        await update.message.reply_text(
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n'
            'detailed - –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n'
            'compact - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n'
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_notification_format [detailed|compact]'
        )
        return

    format_type = context.args[0].lower()
    if format_type in ['detailed', 'compact']:
        user_settings.notification_format = format_type
        await update.message.reply_text(f'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {format_type}')
    else:
        await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ detailed –∏–ª–∏ compact')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π."""
    query = update.callback_query
    await query.answer()

    try:
        if query.data == 'start_monitoring':
            await start_monitoring(update, context, query.message.chat_id, query.from_user.id)
        elif query.data == 'stop_monitoring':
            await stop_monitoring(update, context, query.message.chat_id, query.from_user.id)
        elif query.data == 'status':
            await status(update, context)
       
        elif query.data == 'reset_confirm':
            # Retrieve user settings
            user_settings = get_user_settings(context, query.from_user.id)
            
            # –°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            user_settings.sheet_url = None
            user_settings.sheet_name = None
            user_settings.check_interval = 60
            user_settings.is_monitoring = False
            user_settings.previous_data = None
            user_settings.notification_threshold = 1
            user_settings.last_check_time = None
            user_settings.error_count = 0
            user_settings.monitored_columns = set()
            user_settings.notification_format = 'detailed'
            
            if user_settings.monitoring_task is not None:
                user_settings.monitoring_task.cancel()
                user_settings.monitoring_task = None
            
            await query.message.edit_text(
                '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.\n'
                '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞.'
            )
        elif query.data == 'reset_cancel':
            await query.message.edit_text(
                '‚ùå –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω.'
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await context.bot.send_message(query.message.chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def reset_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_settings = get_user_settings(context, update.effective_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
    await update.message.reply_text(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ?\n'
        '–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='reset_confirm')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='reset_cancel')]
        ])
    )

async def setup_commands(application: Application):
    commands = [
        ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("set_sheet", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å URL –∏ –∏–º—è –ª–∏—Å—Ç–∞"),
        ("set_interval", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"),
        ("set_threshold", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π"),
        ("start_monitoring", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
        ("stop_monitoring", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
        ("status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"),
        ("set_column_filter", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º"),
        ("set_notification_format", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        ("reset", "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
    ]
    await application.bot.set_my_commands(commands)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", exc_info=context.error)
    
    # –ï—Å–ª–∏ —ç—Ç–æ update –æ—Ç callback query
    if isinstance(update, Update) and update.callback_query:
        try:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb_string = "".join(tb_list)
    logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{tb_string}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_sheet", set_sheet))
    application.add_handler(CommandHandler("set_interval", set_interval))
    application.add_handler(CommandHandler("set_threshold", set_notification_threshold))
    application.add_handler(CommandHandler("start_monitoring", lambda update, context: start_monitoring(update, context, update.message.chat_id, update.message.from_user.id)))
    application.add_handler(CommandHandler("stop_monitoring", lambda update, context: stop_monitoring(update, context, update.message.chat_id, update.message.from_user.id)))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("set_column_filter", set_column_filter))
    application.add_handler(CommandHandler("set_notification_format", set_notification_format))
    application.add_handler(CommandHandler("reset", reset_settings))
    application.add_error_handler(error_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.ALL, root_handler))
    
    application.post_init = setup_commands
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()